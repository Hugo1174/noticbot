import asyncio
from aiogram import Bot, F, Router, types
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage

import datetime

from kbds import reply

from db.users_db import Database

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
main_private_router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ –≥—Ä—É–ø–ø–∞–º
#group_events = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#users = set()
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#user_selected_group = {}

# –ú–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
USER_KB = reply.get_keyboard(
        'üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–∞—Ç',
        '‚è≥ –ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞',
        placeholder='–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        sizes=(2,),
)


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class GroupStates(StatesGroup):
    choosing_group = State()
    adding_event = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
@main_private_router.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É")
async def add_event(message: types.Message):
    user_id = message.from_user.id
    group_name = user_selected_group.get(user_id)

    if not group_name:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –º–µ–Ω—é 'üìö –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É'.", reply_markup=main_menu)
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ —Å–æ–±—ã—Ç–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–ì–ì–ì–ì-–ú–ú-–î–î –°–æ–±—ã—Ç–∏–µ`.\n–ù–∞–ø—Ä–∏–º–µ—Ä: `2024-12-25 –†–æ–∂–¥–µ—Å—Ç–≤–æ`.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ —Å–æ–±—ã—Ç–∏—è
@main_private_router.message(lambda message: not message.text.startswith("‚ûï") and 
                            not message.text.startswith("üìö") and 
                            not message.text.startswith("üìÖ") and 
                            not message.text.startswith("‚è≥") and 
                            not message.text.startswith("üö™"))
async def process_date(message: types.Message):
    user_id = message.from_user.id
    group_name = user_selected_group.get(user_id)

    if not group_name:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –º–µ–Ω—é 'üìö –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É'.", reply_markup=main_menu)
        return

    try:
        date, event = message.text.split(" ", 1)
        date = datetime.datetime.strptime(date, "%Y-%m-%d").date()
        group_events[group_name][date] = event
        await message.answer(
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event} –Ω–∞ –¥–∞—Ç—É {date.strftime('%Y-%m-%d')} –≤ –≥—Ä—É–ø–ø–µ '{group_name}'.",
            reply_markup=add_event_menu  # –ú–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        )
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–ì–ì–ì–ì-–ú–ú-–î–î –°–æ–±—ã—Ç–∏–µ`.",
            parse_mode="Markdown"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–∞—Ç
@main_private_router.message(lambda message: message.text == "üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–∞—Ç")
async def view_all_dates(message: types.Message):
    user_id = message.from_user.id
    group_name = user_selected_group.get(user_id)
    if not group_name:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –º–µ–Ω—é 'üìö –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É'.", reply_markup=main_menu)
        return

    events = group_events.get(group_name, {})
    if not events:
        await message.answer(f"–í –≥—Ä—É–ø–ø–µ '{group_name}' —Å–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=add_event_menu)
    else:
        events_list = "\n".join(
            [f"{date.strftime('%Y-%m-%d')}: {event}" for date, event in sorted(events.items())]
        )
        await message.answer(f"–í—Å–µ —Å–æ–±—ã—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ '{group_name}':\n\n{events_list}", reply_markup=add_event_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–∏–∂–∞–π—à–µ–π –¥–∞—Ç—ã
@main_private_router.message(lambda message: message.text == "‚è≥ –ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞")
async def nearest_date(message: types.Message):
    user_id = message.from_user.id
    group_name = user_selected_group.get(user_id)
    if not group_name:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –º–µ–Ω—é 'üìö –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É'.", reply_markup=main_menu)
        return

    events = group_events.get(group_name, {})
    if not events:
        await message.answer(f"–í –≥—Ä—É–ø–ø–µ '{group_name}' —Å–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=add_event_menu)
    else:
        today = datetime.date.today()
        nearest = min(
            (date for date in events if date >= today),
            default=None,
            key=lambda d: (d - today).days
        )
        if nearest:
            await message.answer(
                f"–ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ '{group_name}': {nearest.strftime('%Y-%m-%d')}\n–°–æ–±—ã—Ç–∏–µ: {events[nearest]}",
                reply_markup=add_event_menu
            )
        else:
            await message.answer(f"–ë–ª–∏–∂–∞–π—à–∏—Ö –¥–∞—Ç –≤ –≥—Ä—É–ø–ø–µ '{group_name}' –Ω–µ—Ç.", reply_markup=add_event_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
@main_private_router.message(lambda message: message.text == "üö™ –í—ã–π—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã")
async def leave_group(message: types.Message):
    user_id = message.from_user.id
    group_name = user_selected_group.get(user_id)
    if not group_name:
        await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –≥—Ä—É–ø–ø–µ.", reply_markup=main_menu)
        return

    # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    del user_selected_group[user_id]
    await message.answer(
        f"–í—ã –≤—ã—à–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã '{group_name}'. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≥—Ä—É–ø–ø—É –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é.",
        reply_markup=main_menu
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_notifications():
    while True:
        today = datetime.date.today()
        tomorrow = today + datetime.timedelta(days=1)

        for group_name, events in group_events.items():
            for date, event in events.items():
                if date == tomorrow:
                    for user_id in users:
                        try:
                            await bot.send_message(
                                user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ó–∞–≤—Ç—Ä–∞ ({date.strftime('%Y-%m-%d')}) —Å–æ–±—ã—Ç–∏–µ: {event} –≤ –≥—Ä—É–ø–ø–µ '{group_name}'"
                            )
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await asyncio.sleep(3600)

