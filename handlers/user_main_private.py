import asyncio
from aiogram import Bot, Router
from aiogram.types import Message

import datetime

from kbds import reply

from db.users_db import Database


#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
user_private_router = Router()


# –ú–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
USER_KB = reply.get_keyboard(
        'üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–∞—Ç',
        '‚è≥ –ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞',
        placeholder='–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        sizes=(1,2),
)

db = Database()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–∞—Ç
@user_private_router.message(lambda message: message.text == "üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–∞—Ç")
async def view_all_dates(message: Message):
    user_id = message.from_user.id
    group_id = await db.get_user(str(user_id))
    group_id = group_id[4]
    group_name = await db.return_group(int(group_id))
    group_name = group_name[2]
    events = await db.get_asignment(int(group_id))
    if not events:
        await message.answer(f"–í –≥—Ä—É–ø–ø–µ '{group_name}' —Å–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=USER_KB)
    else:
        response = "–°–æ–±—ã—Ç–∏—è:\n"
        for event in events:
            response += ( f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event['title']},\n"
                          f"–°—Ä–æ–∫: {event['due_date']},\n"
                          f"–û–ø–∏—Å–∞–Ω–∏–µ: {event['description']}\n")
        await message.answer(response, reply_markup=USER_KB)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–∏–∂–∞–π—à–µ–π –¥–∞—Ç—ã
@user_private_router.message(lambda message: message.text == "‚è≥ –ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞")
async def nearest_date(message: Message):
    user_id = message.from_user.id
    group_id = await db.get_user(str(user_id))
    group_id = group_id[4]
    group_name = await db.return_group(int(group_id))
    group_name = group_name[2]
    events = await db.get_asignment(int(group_id))

    if not events:
        await message.answer(f"–í –≥—Ä—É–ø–ø–µ '{group_name}' —Å–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=USER_KB)
    else:
        today = datetime.today().date()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É
        nearest_event = min(
            (event for event in events if event['due_date'].date() >= today),
            default=None,
            key=lambda e: (e['due_date'].date() - today).days
        )

        if nearest_event:
            await message.answer(
                f"–ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ: {nearest_event['due_date'].strftime('%Y-%m-%d')}\n"
                f"–°–æ–±—ã—Ç–∏–µ: {nearest_event['title']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {nearest_event['description']}",
                reply_markup=USER_KB
            )
        else:
            await message.answer(f"–ë–ª–∏–∂–∞–π—à–∏—Ö –¥–∞—Ç –≤ –≥—Ä—É–ø–ø–µ '{group_name}' –Ω–µ—Ç.", reply_markup=USER_KB)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_notifications(bot: Bot):
    while True:
        today = datetime.date.today()
        tomorrow = today + datetime.timedelta(days=1)
        events = await db.get_events_by_date(tomorrow)
        for event in events:
            if event['due_time'].date() == tomorrow: 
                users = await db.search_user_by_group(int(event['group_id']))
                for user in users:
                    try:
                        await bot.send_message(
                            user[0], \
                                f"{user[2]} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ó–∞–≤—Ç—Ä–∞ ({event['due_time']}) —Å–æ–±—ã—Ç–∏–µ: {event['title']}'"
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await asyncio.sleep(3600)