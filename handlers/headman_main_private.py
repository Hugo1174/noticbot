
from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

import datetime

from kbds import reply

from db.users_db import Database

from filters.chat_types import ChatTypeFilter, IsHeadman

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
headman_private_router = Router()
headman_private_router.message.filter(ChatTypeFilter(['private']), IsHeadman())
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ –≥—Ä—É–ø–ø–∞–º
#group_events = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#users = set()
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#user_selected_group = {}

# –ú–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
HEADMAN_KB = reply.get_keyboard(
        '‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É',
        'üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–∞—Ç',
        '‚è≥ –ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞',
        placeholder='–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        sizes=(2,),
)

db = Database()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class AddEvent(StatesGroup):
    event = State()
    date = State()
    time = State()
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
@headman_private_router.message(StateFilter(None), lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É")
async def add_event(message: Message, state : FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ.\n–ö –ø—Ä–∏–º–µ—Ä—É: —Ä—Ç –ø–æ —Ñ–∏–∑–∏–∫–µ")
    await state.set_state(AddEvent.event)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã
@headman_private_router.message(AddEvent.event, F.text)
async def add_event(message: Message, state : FSMContext):
    await state.update_data(event=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–ì–ì–ì–ì-–ú–ú-–î–î`.\n–ù–∞–ø—Ä–∏–º–µ—Ä: `2024-12-25.")
    await state.set_state(AddEvent.date)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
@headman_private_router.message(AddEvent.date, F.text)
async def add_event(message: Message, state : FSMContext):
    await state.update_data(date=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–ß–ß:–ú–ú`.\n–ù–∞–ø—Ä–∏–º–µ—Ä: `16:30.")
    await state.set_state(AddEvent.time)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ —Å–æ–±—ã—Ç–∏—è
@headman_private_router.message(AddEvent.time, F.text)
async def process_date(message: Message, state : FSMContext):
    await state.update_data(time=message.text)
    state_info = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    date = state_info.get('date')
    time = state_info.get('time')+':00'
    due_data = f'{date} {time}'
    try:
        due_date = datetime.datetime.strptime(due_date, "%Y-%m-%d %H:%M:%S")
        event = state_info.get('event')
        await message.answer(
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event} –Ω–∞ –¥–∞—Ç—É {due_data}.",
            reply_markup=HEADMAN_KB  # –ú–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        )
        '''due_date.strftime('%Y-%m-%d)'''
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `–ì–ì–ì–ì-–ú–ú-–î–î –°–æ–±—ã—Ç–∏–µ`.",
            parse_mode="Markdown"
        )
    await state.clear()




