from aiogram import Bot, F, Router
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

#from db.users_db import cursor, connection
#from test_notice_bot import bot

from kbds import reply

from db.users_db import Database

database = Database()

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
registration_private_router = Router()

ADMIN_KB = reply.get_keyboard(
        '–≥—Ä—É–ø–ø—ã',
        '–∞–Ω–Ω–∏–≥–∏–ª—è—Ü–∏—è',
        '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
        '—Ç–æ–∫–µ–Ω',
        placeholder='–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        sizes=(2,2),
)
# –ú–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
HEADMAN_KB = reply.get_keyboard(
        '‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É',
        'üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–∞—Ç',
        '‚è≥ –ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞',
        placeholder='–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
        sizes=(1,3),
)
USER_KB = reply.get_keyboard\
                (
                    'üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–∞—Ç',
                    '‚è≥ –ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞',
                    placeholder="—Å–ø–∏—Å–æ–∫",
                    sizes=(1,2)
                )

class Registration(StatesGroup):
    role = State()
    faculty = State()
    group = State()
    token = State()

@registration_private_router.message(StateFilter(None), lambda msg: msg.text == '/start')
async def process_start_cmd(message : Message, bot : Bot, state : FSMContext):
    user_id =  message.from_user.id
    username = message.from_user.first_name
    print(user_id, username)
    # –∏—â–µ–º —é–∑–µ—Ä–∞ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º
    # –ø–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_user = await database.get_user(user_id)
    print(db_user)
    # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç
    if db_user == None:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–¥–º–∏–Ω–∞
        if str(user_id) in bot.admin_list:
            # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
            await database.add_user(user_id, username, 'admin')
            await message.answer\
            (
                f'–ü—Ä–∏–≤–µ—Ç!\n–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞.\n'
                f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏–∂–µ.',
                reply_markup=ADMIN_KB
            )
        else: # –æ–±—ã—á–Ω—ã–π —é–∑–µ—Ä –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
            await message.answer\
            (
                f'–ü—Ä–∏–≤–µ—Ç {username}!. –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ.\n'
                '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —É–∫–∞–∂–∏ –≤–≤–µ–¥–∏ —Å–≤–æ—é —Ä–æ–ª—å:\n'
                '\t/student\n\t/headman',
                reply_markup=None
            )
            await state.set_state(Registration.role)
    else:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ –∏ –≥–æ–≤–æ—Ä–∏–º –±–æ–ª—å—à–µ –Ω–µ –ø–∏—Å–∞—Ç—å
        if db_user[3] != 'admin':
            # –Ω–µ –∞–¥–º–∏–Ω
            await message.answer\
            (
                f'{username}, —Ç—ã —É–∂–µ –æ–±—â–∞–µ—â—å—Å—è —Å –±–æ—Ç–æ–º.\n'
                '–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –±–æ–ª—å—à–µ –Ω–µ –≤–≤–æ–¥–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n'
                '–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –≤–≤–æ–¥–∏ /help',
                reply_markup=USER_KB
            )
        elif (db_user[3] == 'admin') and (str(user_id) not in bot.admin_list):
            await message.answer('–ó–≤–∏–Ω—è–π, —Ç—ã –±—ã–ª –∞–¥–º–∏–Ω–æ–º, –Ω–æ –±–æ–ª—å—à–µ —Ç—ã –Ω–µ –Ω—É–∂–µ–Ω',
                                 reply_markup=None)
            await database.delete_user(db_user[1])
        else:
            # –∞–¥–º–∏–Ω
            await message.answer\
            (
                f'{username}, —Ç—ã –∞–¥–º–∏–Ω.\n'
                '–ù–µ –∏—Å–ø—ã—Ç—ã–≤–∞–π —Ç–µ—Ä–ø–µ–Ω–∏–µ –±–æ—Ç–∞.\n'
                '–ú–æ–∂–µ—à—å –ª–∏—à–∏—Ç—å—Å—è —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!!!',
                reply_markup=ADMIN_KB  
            )
        

    ''' –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ '''
# –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
@registration_private_router.message(Registration.role, Command("student"))
async def process_student_role(message : Message, state : FSMContext):
    await state.update_data(role="student")
    await message.answer\
        (
            '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç'
        )
    await state.set_state(Registration.faculty)

@registration_private_router.message(Registration.faculty, F.text)
async def process_student_role(message : Message, state : FSMContext):
    await state.update_data(faculty=message.text.casefold())
    await message.answer\
        (
            '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É'
        )
    await state.set_state(Registration.group)
    
# –ø–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
@registration_private_router.message(Registration.group, F.text)
async def process_add_group(message : Message, state : FSMContext):
    # –∏—â–µ–º –≥—Ä—É–ø–ø—É –≤ –±–¥
    user_group = message.text.casefold()

    await state.update_data(group=user_group)

    state_data = await state.get_data()
    faculty = state_data.get('faculty')
    group = await database.search_group(faculty, user_group)
    role = state_data.get('role')
    print(user_group,faculty, group, role)
    if not group:
        # –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ FSM
        if role == 'headman':
            await message.answer\
                (
                    f'–û—Ç–ª–∏—á–Ω–æ!\n{message.from_user.username}, —è —Å–æ–∑–¥–∞–ª –≥—Ä—É–ø–ø—É!'
                )
            # –¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞
            await database.add_user(str(message.from_user.id), message.from_user.username, role)
            headman_id = await database.get_user(str(message.from_user.id))
            headman_id = headman_id[0]
            await database.add_group(faculty, user_group, headman_id)
            group_id = await database.search_group(faculty, user_group)
            group_id = group_id[0]
            await database.add_group_id_to_headman(headman_id, group_id)
            await message.answer\
                (
                    '–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.\n'
                    '–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –º–æ–∂–µ—à—å —Ç–≤–æ—Ä–∏—Ç—å',
                    reply_markup=HEADMAN_KB
                )
        else: 
            await message.answer\
            (
                '–ó–≤–∏–Ω—è–π, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.\n'
                '–í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–∞—Ä–æ—Å—Ç–∞ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–ª –≥—Ä—É–ø–ø—É. –ù–∞–ø–∏—à–∏ –µ–º—É!'
            )
        await state.clear()
    
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ä–æ—Å—Ç—É
    if group:
        group_id = group[0]
        # –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ FSM
        if role == 'student':
            await message.answer\
                (
                    f'–û—Ç–ª–∏—á–Ω–æ!\n{message.from_user.username}, —è –Ω–∞—à—ë–ª —Ç–≤–æ—é –≥—Ä—É–ø–ø—É!'
                )
            # –¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞
            await database.add_user(str(message.from_user.id), message.from_user.username, role, group_id)

            await message.answer\
                (
                    '–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.\n'
                    '–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫ —á–µ–º—É –Ω–∞–¥–æ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è',
                    reply_markup=USER_KB
                )
        else: 
            await message.answer\
            (
                '–ó–≤–∏–Ω—è–π, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.\n'
                '–í–æ–∑–º–æ–∂–Ω–æ –≥–¥–µ-—Ç–æ –æ—à–∏–±–∫–∞!\n'
                '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ - /start'
            )
        await state.clear()


    ''' –¥–ª—è —Å—Ç–∞—Ä–æ—Å—Ç—ã '''
#–ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞ –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã —Ç–æ—Ç –≤—ã–¥–∞–ª —Ç–æ–∫–µ–Ω
@registration_private_router.message(Registration.role, Command('headman'))
async def process_get_token(message : Message, state : FSMContext):
    await state.update_data(role = 'headman')
    await message.answer\
    (
        f'{message.from_user.username}, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω—É @scrooge79\n'
        '–ü–æ–ø—Ä–æ—Å–∏ —É –Ω–µ–≥–æ —Ç–æ–∫–µ–Ω –∏ –≤–≤–µ–¥–∏ –µ–≥–æ —Å—é–¥–∞.'
    )
    await state.set_state(Registration.token)


@registration_private_router.message(Registration.token, F.text)
async def process_headman_faculty(message : Message, state : FSMContext):
    await state.update_data(token=message.text)
    # –∏—â–µ–º —Ç–æ–∫–µ–Ω
    token = await database.search_token(message.text)
    print(token)
    # –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ—Å—Ç—É
    if token:
        if not token[2]:
            await database.use_token(token[1])
            await message.answer\
            (
                '–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç.'
            )
            await state.set_state(Registration.faculty)
            return
        else:
            await message.answer('–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π')
    else:
        await message.answer('–≠—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π')
    await state.set_state(Registration.token)

@registration_private_router.message(Registration.group, F.text)
async def process_group_registration(message : Message, state : FSMContext):    
    # –∏—â–µ–º –≥—Ä—É–ø–ø—É –≤ –±–¥
    user_group = message.text.casefold()

    await state.set_state(group=user_group)

    state_data = await state.get_data()
    faculty = state_data.get('faculty')
    group = await database.search_group(faculty, user_group)
    role = state_data.get('role')
    print(faculty, user_group, group, role)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ä–æ—Å—Ç—É
    if role == 'headman':
        # –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ FSM
        if not group:
            await message.answer\
                (
                    f'–û—Ç–ª–∏—á–Ω–æ!\n{message.from_user.username}, —è —Å–æ–∑–¥–∞–ª –≥—Ä—É–ø–ø—É!'
                )
            # –¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞
            await database.add_user(str(message.from_user.id), message.from_user.username, role, user_group)
            headman_id = await database.get_user(str(message.from_user.id))['id']
            await database.add_group(faculty, user_group, headman_id)
            await message.answer\
                (
                    '–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.\n'
                    '–° –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –º–æ–∂–µ—à—å —Ç–≤–æ—Ä–∏—Ç—å',
                    reply_markup=HEADMAN_KB
                )
            
        else: 
            await message.answer\
            (
                '–ó–≤–∏–Ω—è–π, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.\n'
                '–í–æ–∑–º–æ–∂–Ω–æ –≥–¥–µ-—Ç–æ –æ—à–∏–±–∫–∞!'
            )
    else:
        if group:
            await message.answer\
            (
                '–ó–≤–∏–Ω—è–π, –Ω–æ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ –µ—Å—Ç—å.\n'
            )
            return
            

    await state.clear()








'''
# —Ö—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@registration_private_router.message(lambda msg: msg.text == '/start')
async def process_start_cmd(message : Message, bot : Bot):
    user_id = message.from_user.id
    username = message.from_user.first_name
    # –∏—â–µ–º —é–∑–µ—Ä–∞ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º
    # –ø–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_user = await database.get_user(user_id)
    # –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ—Ç
    if not db_user:
        if str(user_id) not in bot.admin_list:
            await message.answer\
            (
                f'–ü—Ä–∏–≤–µ—Ç!\n–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.\n'
                f'–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∏—Ç—å—Å—è –±–æ—Ç–æ–º, '
                f'–≤–≤–æ–¥–∏ –∫–æ–º–∞–Ω–¥—É /help',
                reply_markup=reply.get_keyboard\
                (
                    "–ó–∞–¥–∞—á–∏",
                    "–∑–∞–¥–∞—á–∞",
                    placeholder="—Å–ø–∏—Å–æ–∫",
                    sizes=(1, 2)
                )   
            )
            # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞
            await database.add_user(user_id, username, 'student')
            print(db_user)
            
        else:
            # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
            await database.add_user(user_id, username, 'admin')
            await message.answer\
            (
                f'–ü—Ä–∏–≤–µ—Ç!\n–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞.\n'
                f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–Ω–æ–ø–∫–∞—Ö',
                reply_markup=reply.get_keyboard\
                (
                    "–∞–Ω–∏–≥–∏–ª—è—Ü–∏—è",
                    "–≥—Ä—É–ø–ø—ã",
                    "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                    placeholder="–∫–æ–º–∞–Ω–¥—ã",
                    sizes=(2, )
                )   
            ) 
    else: # –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é
        if str(user_id) not in bot.admin_list:
            await message.answer\
            (
                f'{username}, —Ç—ã —É–∂–µ –æ–±—â–∞–µ—â—å—Å—è —Å –±–æ—Ç–æ–º.\n'
                '–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –±–æ–ª—å—à–µ –Ω–µ –≤–≤–æ–¥–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É',
                reply_markup=reply.get_keyboard\
                (
                    "–ó–∞–¥–∞—á–∏",
                    "–∑–∞–¥–∞—á–∞",
                    placeholder="—Å–ø–∏—Å–æ–∫",
                    sizes=(2,)
                ) 
            )
        else:
            await message.answer\
            (
                f'{username}, —Ç—ã –∞–¥–º–∏–Ω.\n'
                '–ù—ãs–µ –∏—Å–ø—ã—Ç—ã–≤–∞–π —Ç–µ—Ä–ø–µ–Ω–∏–µ –±–æ—Ç–∞.\n'
                '–ú–æ–∂–µ—à—å –ª–∏—à–∏—Ç—å—Å—è —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!!!',
                reply_markup=reply.get_keyboard\
                (
                    "–∞–Ω–∏–≥–∏–ª—è—Ü–∏—è",
                    "–≥—Ä—É–ø–ø—ã",
                    "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                    placeholder="–∫–æ–º–∞–Ω–¥—ã",
                    sizes=(2, )
                )  
            )

'''